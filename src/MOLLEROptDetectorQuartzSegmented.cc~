#include "MOLLEROptDetectorQuartz.hh"

MOLLEROptDetectorQuartz::MOLLEROptDetectorQuartz(MOLLEROptTrackingReadout *TrRO, G4String name, MOLLEROptMaterial* mat)
{
  Name = name+"_Quartz";
  
  TrackingReadout = TrRO;
  Materials = mat;
  QuartzMaterial = Materials->GetMaterial("Quartz");  

  QuartzLogical  = NULL;
  QuartzPhysical = NULL;
  QuartzSolid = NULL;

  Rotation       = NULL;
  QuartzSD       = NULL;

  Vertices.resize(8);  
}

MOLLEROptDetectorQuartz::~MOLLEROptDetectorQuartz()
{
  
}


void MOLLEROptDetectorQuartz::Initialize()
{
  //Quartz backface at +FullLengthZ/2
  Vertices[0]=G4TwoVector(-FullLengthX/2,-FullLengthY/2);
  Vertices[1]=G4TwoVector(-FullLengthX/2,FullLengthY/2+FullLengthZ);
  Vertices[2]=G4TwoVector(FullLengthX/2,FullLengthY/2+FullLengthZ);
  Vertices[3]=G4TwoVector(FullLengthX/2,-FullLengthY/2);
  
  //Quartz frontface at -FullLengthZ/2
  Vertices[4]=G4TwoVector(-FullLengthX/2,-FullLengthY/2);
  Vertices[5]=G4TwoVector(-FullLengthX/2,FullLengthY/2);
  Vertices[6]=G4TwoVector(FullLengthX/2,FullLengthY/2);
  Vertices[7]=G4TwoVector(FullLengthX/2,-FullLengthY/2);

  QuartzSolid = new G4GenericTrap(Name+"_Solid",FullLengthZ/2, Vertices);
  
  QuartzLogical = new G4LogicalVolume(QuartzSolid,QuartzMaterial,Name+"_Logical");      
  
  G4OpticalSurface* QuartzSurface = new G4OpticalSurface(Name+"_Surface");
  
  const G4double pol = 0.99;
  QuartzSurface->SetModel(unified);
  QuartzSurface->SetFinish(polished);
  QuartzSurface->SetType(dielectric_dielectric);
  QuartzSurface->SetPolish(pol);

  //reposition the quartz to lign up with the bottom of the mother volume
  //G4double motherYmin = MotherVolume->GetLogicalVolume()->GetSolid()->GetExtent()->GetYmin();
  //G4double motherYmax = MotherVolume->GetLogicalVolume()->GetSolid()->GetExtent()->GetYmax();

  PositionX = 0.0*cm;
  PositionY = 0.0*cm;//motherYmin+FullLengthY/2.0; 
  PositionZ = 0.0*cm; 
  
  Position  = G4ThreeVector(PositionX,
			    PositionY,
			    PositionZ);
  
  Rotation = new G4RotationMatrix;
  new G4LogicalSkinSurface("QuartzSurface", QuartzLogical, QuartzSurface);

  SDman = G4SDManager::GetSDMpointer();
  QuartzSD = new MOLLEROptQuartzSD("/Quartz",TrackingReadout);
  SDman->AddNewDetector(QuartzSD);  
  QuartzLogical->SetSensitiveDetector(QuartzSD);

  G4Colour  orange    ( 255/255., 127/255.,   0/255.);
  G4VisAttributes* VisAtt = new G4VisAttributes(orange);
  VisAtt->SetVisibility(true);
  VisAtt->SetForceWireframe(true);
  QuartzLogical->SetVisAttributes(VisAtt);

}

void MOLLEROptDetectorQuartz::Construct(G4VPhysicalVolume* Mother)
{

  MotherVolume = Mother;

  
  QuartzPhysical = new G4PVPlacement(Rotation,  
				     Position, 
				     Name+"_Physical", 
				     QuartzLogical,
				     MotherVolume, 
				     false, 
				     2);  
} 

void MOLLEROptDetectorQuartz::SetMaterial(G4String materialName)
{

}

void MOLLEROptDetectorQuartz::SetQuartzRotX(G4double rot)
{
  Rotation->rotateX(rot);

  PositionZ += TMath::Tan(rot)*FullLengthY/2;

  QuartzPhysical->SetRotation(Rotation);
  QuartzPhysical->SetTranslation(G4ThreeVector(PositionX,
					       PositionY, 
					       PositionZ));
    
}

void MOLLEROptDetectorQuartz::SetCenterPositionInX(G4double xPos)
{
    PositionX =xPos;	 

    QuartzPhysical->SetTranslation(G4ThreeVector(PositionX,
						 PositionY, 
						 PositionZ));
}

void MOLLEROptDetectorQuartz::SetCenterPositionInY(G4double yPos)
{
    PositionY = yPos;

    QuartzPhysical->SetTranslation(G4ThreeVector(PositionX,
					      PositionY, 
					      PositionZ));
}

void MOLLEROptDetectorQuartz::SetCenterPositionInZ(G4double zPos)
{
    PositionZ = zPos;

    QuartzPhysical->SetTranslation(G4ThreeVector(PositionX,
					      PositionY, 
					      PositionZ));
}


void MOLLEROptDetectorQuartz::ClearVolumes()
{
  //SDman->Activate("/Detector",false);
  if(QuartzSD) delete QuartzSD;
  if(QuartzPhysical) delete QuartzPhysical;
  if(QuartzLogical) delete QuartzLogical;
}


void MOLLEROptDetectorQuartz::UpdateGeometry()
{
  // G4PhysicalVolumeStore::GetInstance()->DeRegister(QuartzPhysical);
  // G4LogicalVolumeStore::GetInstance()->DeRegister(QuartzLogical);
  
  G4SolidStore::GetInstance()->DeRegister(QuartzSolid);
  
  // G4LogicalBorderSurface::CleanSurfaceTable();
  delete QuartzSolid;

  //Quartz backface at +FullLengthZ/2
  Vertices[0]=G4TwoVector(-FullLengthX/2,-FullLengthY/2);
  Vertices[1]=G4TwoVector(-FullLengthX/2,FullLengthY/2+FullLengthZ);
  Vertices[2]=G4TwoVector(FullLengthX/2,FullLengthY/2+FullLengthZ);
  Vertices[3]=G4TwoVector(FullLengthX/2,-FullLengthY/2);
  
  //Quartz frontface at -FullLengthZ/2
  Vertices[4]=G4TwoVector(-FullLengthX/2,-FullLengthY/2);
  Vertices[5]=G4TwoVector(-FullLengthX/2,FullLengthY/2);
  Vertices[6]=G4TwoVector(FullLengthX/2,FullLengthY/2);
  Vertices[7]=G4TwoVector(FullLengthX/2,-FullLengthY/2);

  QuartzSolid = new G4GenericTrap(Name+"_Solid",FullLengthZ/2, Vertices);

  QuartzLogical->SetSolid(QuartzSolid);

}


